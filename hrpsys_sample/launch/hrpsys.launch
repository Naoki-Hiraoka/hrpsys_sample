<launch>
  <arg name="CONF_FILE"/>
  <arg name="URDF_FILE"/>
  <arg name="MODEL_FILE"/>
  <arg name="CONTROLLER_CONFIG_FILE" />

  <env name="ORBgiopMaxMsgSize" value="2147483648" /> <!-- openrtm setting -->

  <node name="modelloader" pkg="openhrp3" type="openhrp-model-loader"
        args="-ORBInitRef NameService=corbaloc:iiop:localhost:15005/NameService" output="screen"/> <!-- required for hrpsys RTCs -->

  <node name="rtcd" pkg="openrtm_aist" type="rtcd" output="screen"
        args='-o manager.is_master:YES -o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc"' />

  <node name="load_RobotHardware0"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys_trans_bridge/RobotHardware localhost:2810">
    <rosparam subst_value="true">
      execution_context:
        type: "execution_context_shmtime/ShmTimePeriodicExecutionContext"
        #type: "execution_context_rostime/ROSTimePeriodicExecutionContext"
        #type: "PeriodicExecutionContext"
        rate: 500
      instance_name: RobotHardware0
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="el.rtc:q"     to="RobotHardware0.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="RobotHardware0.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="RobotHardwareServiceROSBridge" type="RobotHardwareServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' /> <!-- exec_cxt.periodic.rateでros::spin-onceが呼ばれるので、Ctrl-Cしたときの応答やserviceCallの応答速度が影響する -->
  <rtconnect from="RobotHardwareServiceROSBridge.rtc:RobotHardwareService" to="RobotHardware0.rtc:RobotHardwareService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="RobotHardwareServiceROSBridge.rtc" />

  <node name="load_seq"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/SequencePlayer localhost:2810">
    <rosparam subst_value="true">
      instance_name: seq
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="sh.rtc:qOut"     to="seq.rtc:qInit" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:basePosOut"     to="seq.rtc:basePosInit" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:baseRpyOut"     to="seq.rtc:baseRpyInit" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:zmpOut"     to="seq.rtc:zmpRefInit" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="seq.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="SequencePlayerServiceROSBridge" type="SequencePlayerServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="SequencePlayerServiceROSBridge.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="SequencePlayerServiceROSBridge.rtc" />

  <node name="load_sh"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/StateHolder localhost:2810">
    <rosparam subst_value="true">
      instance_name: sh
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="seq.rtc:qRef"     to="sh.rtc:qIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:tqRef"     to="sh.rtc:tqIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:basePos"     to="sh.rtc:basePosIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:baseRpy"     to="sh.rtc:baseRpyIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:zmpRef"     to="sh.rtc:zmpIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:optionalData"     to="sh.rtc:optionalDataIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:rfsensorRef"     to="sh.rtc:rfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:lfsensorRef"     to="sh.rtc:lfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:rhsensorRef"     to="sh.rtc:rhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:lhsensorRef"     to="sh.rtc:lhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:q"     to="sh.rtc:currentQIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="sh.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="StateHolderServiceROSBridge" type="StateHolderServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="StateHolderServiceROSBridge.rtc:StateHolderService" to="sh.rtc:StateHolderService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="StateHolderServiceROSBridge.rtc" />

  <node name="load_es"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/EmergencyStopper localhost:2810">
    <rosparam subst_value="true">
      instance_name: es
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="sh.rtc:qOut"     to="es.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:rfsensorOut"     to="es.rtc:rfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:lfsensorOut"     to="es.rtc:lfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:rhsensorOut"     to="es.rtc:rhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:lhsensorOut"     to="es.rtc:lhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:servoState"     to="es.rtc:servoStateIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="st.rtc:emergencySignal"     to="es.rtc:emergencySignal" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="es.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="EmergencyStopperServiceROSBridge" type="EmergencyStopperServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="EmergencyStopperServiceROSBridge.rtc:EmergencyStopperService" to="es.rtc:EmergencyStopperService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="EmergencyStopperServiceROSBridge.rtc" />

  <node name="load_ic"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/ImpedanceController localhost:2810">
    <rosparam subst_value="true">
      instance_name: ic
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="es.rtc:q"     to="ic.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:basePosOut"     to="ic.rtc:basePosIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:baseRpyOut"     to="ic.rtc:baseRpyIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:rfsensorOut"     to="ic.rtc:ref_rfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:lfsensorOut"     to="ic.rtc:ref_lfsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:rhsensorOut"     to="ic.rtc:ref_rhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:lhsensorOut"     to="ic.rtc:ref_lhsensorIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:q"     to="ic.rtc:qCurrent" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rfsensor"     to="ic.rtc:rfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lfsensor"     to="ic.rtc:lfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rhsensor"     to="ic.rtc:rhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lhsensor"     to="ic.rtc:lhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="ic.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="ImpedanceControllerServiceROSBridge" type="ImpedanceControllerServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="ImpedanceControllerServiceROSBridge.rtc:ImpedanceControllerService" to="ic.rtc:ImpedanceControllerService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="ImpedanceControllerServiceROSBridge.rtc" />

  <node name="load_abc"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/AutoBalancer localhost:2810">
    <rosparam subst_value="true">
      instance_name: abc
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="ic.rtc:q"     to="abc.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:basePosOut"     to="abc.rtc:basePosIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:baseRpyOut"     to="abc.rtc:baseRpyIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="sh.rtc:optionalDataOut"     to="abc.rtc:optionalData" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="st.rtc:emergencySignal"     to="abc.rtc:emergencySignal" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="st.rtc:diffCapturePoint"     to="abc.rtc:diffCapturePoint" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="st.rtc:actContactStates"     to="abc.rtc:actContactStates" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:rfsensorOut"     to="abc.rtc:ref_rfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:lfsensorOut"     to="abc.rtc:ref_lfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:rhsensorOut"     to="abc.rtc:ref_rhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="es.rtc:lhsensorOut"     to="abc.rtc:ref_lhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="abc.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="AutoBalancerServiceROSBridge" type="AutoBalancerServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="AutoBalancerServiceROSBridge.rtc:AutoBalancerService" to="abc.rtc:AutoBalancerService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="AutoBalancerServiceROSBridge.rtc" />

  <node name="load_st"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/Stabilizer localhost:2810">
    <rosparam subst_value="true">
      instance_name: st
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="abc.rtc:q"     to="st.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="kf.rtc:rpy"     to="st.rtc:rpy" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:zmpOut"     to="st.rtc:zmpRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:basePosOut"     to="st.rtc:basePosIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:baseRpyOut"     to="st.rtc:baseRpyIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:contactStates"     to="st.rtc:contactStates" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:controlSwingSupportTime"     to="st.rtc:controlSwingSupportTime" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:q"     to="st.rtc:qCurrent" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="seq.rtc:qRef"     to="st.rtc:qRefSeq" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:walkingStates"     to="st.rtc:walkingStates" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:sbpCogOffset"     to="st.rtc:sbpCogOffset" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:toeheelRatio"     to="st.rtc:toeheelRatio" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:rfsensor"     to="st.rtc:rfsensorRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:lfsensor"     to="st.rtc:lfsensorRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:rhsensor"     to="st.rtc:rhsensorRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:lhsensor"     to="st.rtc:lhsensorRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:limbCOPOffset_rfsensor"     to="st.rtc:limbCOPOffset_rfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:limbCOPOffset_lfsensor"     to="st.rtc:limbCOPOffset_lfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:limbCOPOffset_rhsensor"     to="st.rtc:limbCOPOffset_rhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:limbCOPOffset_lhsensor"     to="st.rtc:limbCOPOffset_lhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rfsensor"     to="st.rtc:rfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lfsensor"     to="st.rtc:lfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rhsensor"     to="st.rtc:rhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lhsensor"     to="st.rtc:lhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="st.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="StabilizerServiceROSBridge" type="StabilizerServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="StabilizerServiceROSBridge.rtc:StabilizerService" to="st.rtc:StabilizerService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="StabilizerServiceROSBridge.rtc" />

  <node name="load_co"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/CollisionDetector localhost:2810">
    <rosparam subst_value="true">
      instance_name: co
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="st.rtc:q"     to="co.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:servoState"     to="co.rtc:servoStateIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="co.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="CollisionDetectorServiceROSBridge" type="CollisionDetectorServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="CollisionDetectorServiceROSBridge.rtc:CollisionDetectorService" to="co.rtc:CollisionDetectorService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="CollisionDetectorServiceROSBridge.rtc" />

  <node name="load_hes"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/EmergencyStopper localhost:2810">
    <rosparam subst_value="true">
      instance_name: hes
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="co.rtc:q"     to="hes.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="hes.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="HardEmergencyStopperServiceROSBridge" type="EmergencyStopperServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="HardEmergencyStopperServiceROSBridge.rtc:EmergencyStopperService" to="hes.rtc:EmergencyStopperService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="EmergencyStopperServiceROSBridge.rtc" />

  <node name="load_el"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/SoftErrorLimiter localhost:2810">
    <rosparam subst_value="true">
      instance_name: el
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="hes.rtc:q"     to="el.rtc:qRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:q"     to="el.rtc:qCurrent" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:servoState"     to="el.rtc:servoStateIn" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="el.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="SoftErrorLimiterServiceROSBridge" type="SoftErrorLimiterServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="SoftErrorLimiterServiceROSBridge.rtc:SoftErrorLimiterService" to="el.rtc:SoftErrorLimiterService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="SoftErrorLimiterServiceROSBridge.rtc" />

  <node name="load_kf"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/KalmanFilter localhost:2810">
    <rosparam subst_value="true">
      instance_name: kf
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="RobotHardware0.rtc:gsensor"     to="kf.rtc:acc" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:gyrometer"     to="kf.rtc:rate" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:q"     to="kf.rtc:qCurrent" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="abc.rtc:accRef"     to="kf.rtc:accRef" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="kf.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="KalmanFilterServiceROSBridge" type="KalmanFilterServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="KalmanFilterServiceROSBridge.rtc:KalmanFilterService" to="kf.rtc:KalmanFilterService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="KalmanFilterServiceROSBridge.rtc" />

  <node name="load_rmfo"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/RemoveForceSensorLinkOffset localhost:2810">
    <rosparam subst_value="true">
      instance_name: rmfo
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="RobotHardware0.rtc:q"     to="rmfo.rtc:qCurrent" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:rfsensor"     to="rmfo.rtc:rfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:lfsensor"     to="rmfo.rtc:lfsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:rhsensor"     to="rmfo.rtc:rhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:lhsensor"     to="rmfo.rtc:lhsensor" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="kf.rtc:rpy"     to="rmfo.rtc:rpy" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="rmfo.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="RemoveForceSensorLinkOffsetServiceROSBridge" type="RemoveForceSensorLinkOffsetServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="RemoveForceSensorLinkOffsetServiceROSBridge.rtc:RemoveForceSensorLinkOffsetService" to="rmfo.rtc:RemoveForceSensorLinkOffsetService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="RemoveForceSensorLinkOffsetServiceROSBridge.rtc" />

  <node name="load_bp"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/Beeper localhost:2810">
    <rosparam subst_value="true">
      instance_name: bp
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <rtconnect from="es.rtc:beepCommand"     to="bp.rtc:beepCommand" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <rtconnect from="el.rtc:beepCommand"     to="bp.rtc:beepCommand" push_policy="new" push_rate="1000.0" buffer_length="1"/>
  <!-- <rtactivate component="bp.rtc"/> -->

  <node name="load_log"  pkg="rtcloader" type="load.py" output="screen" args="hrpsys-base/DataLogger localhost:2810">
    <rosparam subst_value="true">
      instance_name: log
      config_file: $(arg CONF_FILE)
    </rosparam>
  </node>
  <!-- <rtactivate component="log.rtc"/> -->

  <node pkg="hrpsys_ros_bridge" name="DataLoggerServiceROSBridge" type="DataLoggerServiceROSBridgeComp"
        output="screen" args ='-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.rate:100"' />
  <rtconnect from="DataLoggerServiceROSBridge.rtc:DataLoggerService" to="log.rtc:DataLoggerService"  subscription_type="new" push_policy="new"/>
  <rtactivate component="DataLoggerServiceROSBridge.rtc" />

  <node name="serialize" pkg="rtcloader" type="serialize.py" output="screen" args="localhost:2810">
    <rosparam>
      instance_names: ["RobotHardware0","seq","sh","kf","rmfo","es","ic","abc","st","co","hes","el","bp","log"]
    </rosparam>
  </node>

  <param name="robot_description" textfile="$(arg URDF_FILE)" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="hrpsys_state_publisher" />

  <node name = "HrpsysSeqStateROSBridge"
        pkg  = "hrpsys_ros_bridge"
        type = "HrpsysSeqStateROSBridge"
        args = '-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o model:"file://$(arg MODEL_FILE)" -o "example.HrpsysSeqStateROSBridge.config_file:$(arg CONF_FILE)" -o "exec_cxt.periodic.rate:500"'
        output = "screen">
    <param name="publish_sensor_transforms" value="true" />
  </node>
  <rtconnect from="RobotHardware0.rtc:q"  to="HrpsysSeqStateROSBridge0.rtc:rsangle" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:tau"  to="HrpsysSeqStateROSBridge0.rtc:rstorque" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:gsensor" to="HrpsysSeqStateROSBridge0.rtc:gsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:gyrometer" to="HrpsysSeqStateROSBridge0.rtc:gyrometer" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:rfsensor"     to="HrpsysSeqStateROSBridge0.rtc:rfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:lfsensor"     to="HrpsysSeqStateROSBridge0.rtc:lfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:rhsensor"     to="HrpsysSeqStateROSBridge0.rtc:rhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="RobotHardware0.rtc:lhsensor"     to="HrpsysSeqStateROSBridge0.rtc:lhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rfsensor"     to="HrpsysSeqStateROSBridge0.rtc:off_rfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lfsensor"     to="HrpsysSeqStateROSBridge0.rtc:off_lfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_rhsensor"     to="HrpsysSeqStateROSBridge0.rtc:off_rhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="rmfo.rtc:off_lhsensor"     to="HrpsysSeqStateROSBridge0.rtc:off_lhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="sh.rtc:baseTformOut" to="HrpsysSeqStateROSBridge0.rtc:baseTform" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="sh.rtc:qOut" to="HrpsysSeqStateROSBridge0.rtc:mcangle" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="es.rtc:rfsensorOut"     to="HrpsysSeqStateROSBridge0.rtc:ref_rfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="es.rtc:lfsensorOut"     to="HrpsysSeqStateROSBridge0.rtc:ref_lfsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="es.rtc:rhsensorOut"     to="HrpsysSeqStateROSBridge0.rtc:ref_rhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="es.rtc:lhsensorOut"     to="HrpsysSeqStateROSBridge0.rtc:ref_lhsensor" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="el.rtc:servoStateOut" to="HrpsysSeqStateROSBridge0.rtc:servoState" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="es.rtc:emergencyMode" to="HrpsysSeqStateROSBridge0.rtc:emergencyMode" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtconnect from="HrpsysSeqStateROSBridge0.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtactivate component="HrpsysSeqStateROSBridge0.rtc" />

  <rosparam command="load" file="$(arg CONTROLLER_CONFIG_FILE)" />
  <node name = "HrpsysJointTrajectoryBridge"
        pkg  = "hrpsys_ros_bridge"
        type = "HrpsysJointTrajectoryBridge"
        args = '-o "corba.master_manager:localhost:2810" -o "corba.nameservers:localhost:15005" -o "naming.formats:%n.rtc" -o model:"file://$(arg MODEL_FILE)" -o "exec_cxt.periodic.rate:500"'
        output = "screen" />
  <rtconnect from="HrpsysJointTrajectoryBridge0.rtc:SequencePlayerService" to="seq.rtc:SequencePlayerService" subscription_type="new" push_policy="new" buffer_length="1"/>
  <rtactivate component="HrpsysJointTrajectoryBridge0.rtc" />

  <node name="rtmlaunch_hrpsys" pkg="openrtm_tools" type="rtmlaunch.py" args="$(find hrpsys_sample)/launch/hrpsys.launch" output="screen">
    <env name="RTC_CONNECTION_CHECK_ONCE" value="true"/>
  </node>
</launch>
